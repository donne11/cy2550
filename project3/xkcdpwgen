#!/usr/bin/env python3

import argparse
import random
import string

def generate_password(words, caps, numbers, symbols):
    with open('/usr/share/dict/words') as f:
        wordlist = f.read().splitlines()

    words_list = random.sample(wordlist, words)

    if caps > 0:
        for i in range(caps):
            word_idx = random.randint(0, words - 1)
            words_list[word_idx] = words_list[word_idx].capitalize()

    if numbers > 0:
        for i in range(numbers):
            num = random.randint(0, 9)
            word_idx = random.randint(0, words - 1)
            words_list.insert(word_idx, str(num))

    if symbols > 0:
        symbols_list = list(set(string.punctuation) - set("'\""))  # Exclude ' and " from symbols
        for i in range(symbols):
            symbol = random.choice(symbols_list)
            word_idx = random.randint(0, words - 1)
            words_list.insert(word_idx, symbol)

    password = ''.join(words_list)
    return password

def main():
    parser = argparse.ArgumentParser(description='Generate a secure, memorable password using the XKCD method')
    parser.add_argument('-w', '--words', type=int, default=4, help='include WORDS words in the password (default=4)')
    parser.add_argument('-c', '--caps', type=int, default=0, help='capitalize the first letter of CAPS random words (default=0)')
    parser.add_argument('-n', '--numbers', type=int, default=0, help='insert NUMBERS random numbers in the password (default=0)')
    parser.add_argument('-s', '--symbols', type=int, default=0, help='insert SYMBOLS random symbols in the password (default=0)')
    args = parser.parse_args()

    password = generate_password(args.words, args.caps, args.numbers, args.symbols)
    print(password)

if __name__ == "__main__":
    main()
